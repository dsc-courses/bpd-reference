"use strict";(self.webpackChunkbpd_reference=self.webpackChunkbpd_reference||[]).push([[3342],{9965:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>c,toc:()=>l});var s=a(4848),t=a(8453),r=a(8597);a(8205);const d={sidebar_position:5},i=void 0,c={id:"documentation/accessing-data/df.index",title:"df.index",description:"df.index",source:"@site/docs/documentation/accessing-data/df.index.md",sourceDirName:"documentation/accessing-data",slug:"/documentation/accessing-data/df.index",permalink:"/bpd-reference/docs/documentation/accessing-data/df.index",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"ser.iloc[]",permalink:"/bpd-reference/docs/documentation/accessing-data/ser.iloc[]"},next:{title:"df.columns",permalink:"/bpd-reference/docs/documentation/accessing-data/df.columns"}},o={},l=[];function h(e){const n={a:"a",code:"code",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("code",{children:"df.index"}),"\n",(0,s.jsxs)("div",{className:"base",children:[(0,s.jsx)("p",{children:(0,s.jsx)("strong",{children:"Returns the indices (row labels) of the DataFrame."})}),(0,s.jsxs)("dl",{children:[(0,s.jsx)("dt",{className:"term",children:"Note:"}),(0,s.jsx)("dd",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"The index of a DataFrame is a Series of labels that identify each row. The labels can be integers, strings, or any other hashable type."}),(0,s.jsx)("li",{children:"Positions start at 0. Negative positions start from the end of the DataFrame."}),(0,s.jsxs)("li",{children:["The return type is bpd.Index. Use ",(0,s.jsx)(n.code,{children:"np.array()"})," to convert it to a numpy array."]})]})})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"pets\n"})}),"\n",(0,s.jsx)(r.A,{data:'{"columns":["ID","Species","Color","Weight","Age","Is_Cat","Owner_Comment"],"index":[0,1,2,3,4,5,6,7],"data":[["dog_001","dog","black",40.0,5.0,false,"      There are no bad dogs, only bad owners."],["cat_001","cat","golden",1.5,0.2,true,"My best birthday present ever!!!"],["cat_002","cat","black",15.0,9.0,true,"****All you need is love and a cat.****"],["dog_002","dog","white",80.0,2.0,false,"Love is a wet nose and a wagging tail."],["dog_003","dog","black",25.0,0.5,false,"Be the person your dog thinks you are."],["ham_001","hamster","black",1.0,3.0,false,"No, thank you!"],["ham_002","hamster","golden",0.25,0.2,false,"No, thank you!"],["cat_003","cat","black",10.0,0.0,true,"No, thank you!"]]}'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"pets.index[0]\n"})}),"\n",(0,s.jsx)(n.p,{children:"0"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"pets.index[-3]\n"})}),"\n",(0,s.jsx)(n.p,{children:"5"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"pets_idx = pets.set_index('ID').index\npets_idx\n"})}),"\n",(0,s.jsx)(n.p,{children:"Index(['dog_001', 'cat_001', 'cat_002', 'dog_002', 'dog_003', 'ham_001',\n'ham_002', 'cat_003'],\ndtype='object', name='ID')"}),"\n",(0,s.jsxs)("p",{children:[(0,s.jsx)("br",{})," ",(0,s.jsxs)(n.strong,{children:["Convert index to a numpy array. Learn more about this in the ",(0,s.jsx)(n.a,{href:"https://dsc-courses.github.io/bpd-reference/docs/documentation/data%20format%20conversion/np.array()",children:"Data Format Conversion"})," section."]})," "]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"idx_arr = np.array(pets_idx)\nidx_arr\n"})}),"\n",(0,s.jsx)(n.p,{children:"array(['dog_001', 'cat_001', 'cat_002', 'dog_002', 'dog_003', 'ham_001',\n'ham_002', 'cat_003'], dtype=object)"})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8597:(e,n,a)=>{a.d(n,{A:()=>t});a(6540);var s=a(4848);const t=e=>{let{data:n}=e,a=[],t=[],r="",d=[];if(n){const e=JSON.parse(n);a=e.columns||[],t=e.data||[],r=e.indexName||"Index",d=e.index||[]}return(0,s.jsx)("div",{className:"dataframe-container",children:(0,s.jsxs)("table",{className:"dataframe-table",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:r}),a.map(((e,n)=>(0,s.jsx)("th",{children:e},n)))]})}),(0,s.jsx)("tbody",{children:t.map(((e,n)=>(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{className:"index-value",children:d[n]}),e.map(((e,n)=>{return(0,s.jsx)("td",{children:(a=e,"boolean"==typeof a?a.toString().charAt(0).toUpperCase()+a.toString().slice(1):a)},n);var a}))]},n)))})]})})}},8205:(e,n,a)=>{a.d(n,{A:()=>t});a(6540);var s=a(4848);const t=e=>{let{data:n}=e,a=[],t=[],r="",d="";if(n)try{const e=JSON.parse(n);r=e.name||"",d=e.dtype||"Unknown type",a=e.index||[],t=e.data||[]}catch(c){console.error("Error parsing data prop in SeriesComponent:",c)}const i=t.map((e=>JSON.stringify(e)));return(0,s.jsxs)("div",{className:"series-container",children:[(0,s.jsx)("ul",{className:"series-list",children:i.map(((e,n)=>(0,s.jsxs)("li",{className:"series-item",children:[(0,s.jsx)("span",{className:"series-index",children:a[n]}),(0,s.jsx)("span",{className:"series-value",children:"true"===e||"false"===e?e.charAt(0).toUpperCase()+e.slice(1):e})]},n)))}),(0,s.jsxs)("div",{className:"series-footer",children:["Name: ",r,", dtype: ",d]})]})}},8453:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>i});var s=a(6540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
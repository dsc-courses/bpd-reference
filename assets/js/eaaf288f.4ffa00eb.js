"use strict";(self.webpackChunkbpd_reference=self.webpackChunkbpd_reference||[]).push([[9600],{4653:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var s=i(4848),d=i(8453);const a={title:"Building and Organizing DataFrames"},r=void 0,c={id:"documentation/building-organizing/index",title:"Building and Organizing DataFrames",description:"Each function/method creates a new DataFrame. Remember to save it!",source:"@site/docs/documentation/building-organizing/index.md",sourceDirName:"documentation/building-organizing",slug:"/documentation/building-organizing/",permalink:"/bpd-reference/docs/documentation/building-organizing/",draft:!1,unlisted:!1,editUrl:"https://github.com/dsc-courses/bpd-reference/tree/main/docs/documentation/building-organizing/index.md",tags:[],version:"current",frontMatter:{title:"Building and Organizing DataFrames"},sidebar:"docsSidebar",previous:{title:"Intro",permalink:"/bpd-reference/docs/documentation/intro"},next:{title:"bpd.DataFrame()",permalink:"/bpd-reference/docs/documentation/building-organizing/bpd.DataFrame()"}},t={},o=[{value:"Manipulating",id:"manipulating",level:2},{value:"Indexing",id:"indexing",level:2},{value:"Organizing",id:"organizing",level:2},{value:"Merging",id:"merging",level:2}];function l(e){const n={a:"a",h2:"h2",p:"p",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{className:"main-description",children:"Each function/method creates a new DataFrame. Remember to save it!"}),"\n",(0,s.jsx)(n.h2,{id:"manipulating",children:"Manipulating"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"bpd.DataFrame()",children:(0,s.jsx)("code",{children:"bpd.DataFrame"})}),"()"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Creates an empty DataFrame."})})]}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"bpd.read_csv()",children:(0,s.jsx)("code",{children:"bpd.read_csv"})}),"(filepath)"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Read a comma-separated values (csv) file into DataFrame."})})]}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"df.assign()",children:(0,s.jsx)("code",{children:"df.assign"})}),"(name_of_column=column_data)"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Adds a new column to the DataFrame."})})]}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"df.drop()",children:(0,s.jsx)("code",{children:"df.drop"})}),"(columns=column_name or [col_1_name, ..., col_k_name])"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Drops a single column, or every column in a list of column names."})})]}),"\n",(0,s.jsx)(n.h2,{id:"indexing",children:"Indexing"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"df.set_index()",children:(0,s.jsx)("code",{children:"df.set_index"})}),"(column_name)"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Moves a column to the index."})})]}),"\n",(0,s.jsx)(n.h2,{id:"organizing",children:"Organizing"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"df.reset_index()",children:(0,s.jsx)("code",{children:"df.reset_index"})}),"(drop=False)"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Moves a column to the index."})})]}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"df.sort_values()",children:(0,s.jsx)("code",{children:"df.sort_values"})}),"(by=column_name, ascending=True)"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Sorts the entire DataFrame in ascending order by the values in the column."})})]}),"\n",(0,s.jsx)(n.h2,{id:"merging",children:"Merging"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)("div",{className:"method-container",children:[(0,s.jsx)("div",{className:"method",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"df.merge()",children:(0,s.jsx)("code",{children:"df.merge"})}),"(right, how='inner', on=column, left_on=left_column, right_on=right_column, left_index=False, right_index=False)"]})}),(0,s.jsx)("div",{className:"description",children:(0,s.jsx)("p",{children:"Merges two DataFrames by specified columns or indexes, using the specified type of merge."})})]})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var s=i(6540);const d={},a=s.createContext(d);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);
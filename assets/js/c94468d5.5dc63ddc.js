"use strict";(self.webpackChunkbpd_reference=self.webpackChunkbpd_reference||[]).push([[3484],{7486:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=n(4848),r=n(8453),t=n(8597);n(8205);const i={sidebar_position:8},d=void 0,o={id:"documentation/building-organizing/df.merge()",title:"df.merge()",description:"df.merge(right, on=column, lefton=leftcolumn, righton=rightcolumn, leftindex=False, rightindex=False)",source:"@site/docs/documentation/building-organizing/df.merge().md",sourceDirName:"documentation/building-organizing",slug:"/documentation/building-organizing/df.merge()",permalink:"/bpd-reference/docs/documentation/building-organizing/df.merge()",draft:!1,unlisted:!1,editUrl:"https://github.com/dsc-courses/bpd-reference/tree/main/docs/documentation/building-organizing/df.merge().md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"docsSidebar",previous:{title:"df.sort_values()",permalink:"/bpd-reference/docs/documentation/building-organizing/df.sort_values()"},next:{title:"Accessing Data",permalink:"/bpd-reference/docs/documentation/accessing-data/"}},l={},c=[];function m(e){const a={code:"code",hr:"hr",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("code",{children:"df.merge(right, on=column, left_on=left_column, right_on=right_column, left_index=False, right_index=False)"}),"\n",(0,s.jsxs)("div",{className:"base",children:[(0,s.jsx)("p",{children:(0,s.jsx)("strong",{children:"Merges two DataFrames by specified columns or indexes."})}),(0,s.jsxs)("dl",{children:[(0,s.jsx)("dt",{className:"term",children:"Input:"}),(0,s.jsxs)("dd",{className:"parameter",children:["right : ",(0,s.jsx)("em",{children:"DataFrame"})]}),(0,s.jsx)("dd",{className:"parameter-description",children:"DataFrame to merge with."}),(0,s.jsxs)("dd",{className:"parameter",children:["on : ",(0,s.jsx)("em",{children:"label or list"})]}),(0,s.jsx)("dd",{className:"parameter-description",children:"Column or index names to join on."}),(0,s.jsxs)("dd",{className:"parameter",children:["left_on : ",(0,s.jsx)("em",{children:"label, list, or array-like"})]}),(0,s.jsx)("dd",{className:"parameter-description",children:"Column or index names to join on the in the left DataFrame."}),(0,s.jsxs)("dd",{className:"parameter",children:["right_on : ",(0,s.jsx)("em",{children:"label, list, or array-like"})]}),(0,s.jsx)("dd",{className:"parameter-description",children:"Column or index names to join on the in the right DataFrame."}),(0,s.jsxs)("dd",{className:"parameter",children:["left_index : ",(0,s.jsx)("em",{children:"boolean, default False"})]}),(0,s.jsx)("dd",{className:"parameter-description",children:"Use index from left DataFrame as join key(s)."}),(0,s.jsxs)("dd",{className:"parameter",children:["right_index : ",(0,s.jsx)("em",{children:"boolean, default False"})]}),(0,s.jsx)("dd",{className:"parameter-description",children:"Use index from right DataFrame as join key(s)."}),(0,s.jsx)("dt",{className:"term",children:"Returns:"}),(0,s.jsx)("dd",{children:"df_merged - A new DataFrame with the two DataFrames merged on the specified input combinations."}),(0,s.jsx)("dt",{className:"term",children:"Return Type:"}),(0,s.jsx)("dd",{children:"DataFrame"}),(0,s.jsx)("dt",{className:"term",children:"Note:"}),(0,s.jsx)("dd",{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"The number of columns merged on the left and right DataFrames must be the same."}),(0,s.jsxs)("li",{children:[(0,s.jsx)("em",{children:"left_on"})," and ",(0,s.jsx)("em",{children:"left_index"})," cannot happen at the same time. Same as ",(0,s.jsx)("em",{children:"right_on"})," and ",(0,s.jsx)("em",{children:"right_index"}),"."]})]})})]})]}),"\n",(0,s.jsx)(a.hr,{}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-python",children:"pets_info = bpd.DataFrame().assign(\r\n    Pet_ID=['dog_001', 'cat_001', 'cat_002', 'dog_002', 'dog_003', 'ham_001'],\r\n    Breed=['Labrador', 'Sphinx', 'Siamese', 'Chihuahua', 'Labrador', 'Roborovski'],\r\n    Owner=['Jason', 'Lauren', 'Cassidy', 'Bobby', 'Dhruv', 'Cassidy']\r\n)\r\npets_info\n"})}),"\n",(0,s.jsx)(t.A,{data:'{"columns":["Pet_ID","Breed","Owner"],"index":[0,1,2,3,4,5],"data":[["dog_001","Labrador","Jason"],["cat_001","Sphinx","Lauren"],["cat_002","Siamese","Cassidy"],["dog_002","Chihuahua","Bobby"],["dog_003","Labrador","Dhruv"],["ham_001","Roborovski","Cassidy"]]}'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-python",children:"pets.merge(pets_info, left_on='ID', right_on='Pet_ID')\n"})}),"\n",(0,s.jsx)(t.A,{data:'{"columns":["ID","Species","Color","Weight","Age","Is_Cat","Owner_Comment","Pet_ID","Breed","Owner"],"index":[0,1,2,3,4,5],"data":[["dog_001","dog","black",40.0,5.0,false,"      There are no bad dogs, only bad owners.","dog_001","Labrador","Jason"],["cat_001","cat","golden",1.5,0.2,true,"My best birthday present ever!!!","cat_001","Sphinx","Lauren"],["cat_002","cat","black",15.0,9.0,true,"****All you need is love and a cat.****","cat_002","Siamese","Cassidy"],["dog_002","dog","white",80.0,2.0,false,"Love is a wet nose and a wagging tail.","dog_002","Chihuahua","Bobby"],["dog_003","dog","black",25.0,0.5,false,"Be the person your dog thinks you are.","dog_003","Labrador","Dhruv"],["ham_001","hamster","black",1.0,3.0,false,"No, thank you!","ham_001","Roborovski","Cassidy"]]}'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-python",children:"pets_info = pets_info.set_index('Pet_ID')\r\npets.merge(pets_info, left_on='ID', right_index=True)\n"})}),"\n",(0,s.jsx)(t.A,{data:'{"columns":["ID","Species","Color","Weight","Age","Is_Cat","Owner_Comment","Breed","Owner"],"index":[0,1,2,3,4,5],"data":[["dog_001","dog","black",40.0,5.0,false,"      There are no bad dogs, only bad owners.","Labrador","Jason"],["cat_001","cat","golden",1.5,0.2,true,"My best birthday present ever!!!","Sphinx","Lauren"],["cat_002","cat","black",15.0,9.0,true,"****All you need is love and a cat.****","Siamese","Cassidy"],["dog_002","dog","white",80.0,2.0,false,"Love is a wet nose and a wagging tail.","Chihuahua","Bobby"],["dog_003","dog","black",25.0,0.5,false,"Be the person your dog thinks you are.","Labrador","Dhruv"],["ham_001","hamster","black",1.0,3.0,false,"No, thank you!","Roborovski","Cassidy"]]}'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-python",children:"pets_info2 = pets_info.assign(ID = pets_info.index)\r\npets.merge(pets_info2, on='ID')\n"})}),"\n",(0,s.jsx)(t.A,{data:'{"columns":["ID","Species","Color","Weight","Age","Is_Cat","Owner_Comment","Breed","Owner"],"index":[0,1,2,3,4,5],"data":[["dog_001","dog","black",40.0,5.0,false,"      There are no bad dogs, only bad owners.","Labrador","Jason"],["cat_001","cat","golden",1.5,0.2,true,"My best birthday present ever!!!","Sphinx","Lauren"],["cat_002","cat","black",15.0,9.0,true,"****All you need is love and a cat.****","Siamese","Cassidy"],["dog_002","dog","white",80.0,2.0,false,"Love is a wet nose and a wagging tail.","Chihuahua","Bobby"],["dog_003","dog","black",25.0,0.5,false,"Be the person your dog thinks you are.","Labrador","Dhruv"],["ham_001","hamster","black",1.0,3.0,false,"No, thank you!","Roborovski","Cassidy"]]}'})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},8597:(e,a,n)=>{n.d(a,{A:()=>r});n(6540);var s=n(4848);const r=e=>{let{data:a}=e,n=[],r=[],t="",i=[];if(a){const e=JSON.parse(a);n=e.columns||[],r=e.data||[],t=e.indexName||"Index",i=e.index||[]}return(0,s.jsx)("div",{className:"dataframe-container",children:(0,s.jsxs)("table",{className:"dataframe-table",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:t}),n.map(((e,a)=>(0,s.jsx)("th",{children:e},a)))]})}),(0,s.jsx)("tbody",{children:r.map(((e,a)=>(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{className:"index-value",children:i[a]}),e.map(((e,a)=>{return(0,s.jsx)("td",{children:(n=e,"boolean"==typeof n?n.toString().charAt(0).toUpperCase()+n.toString().slice(1):n)},a);var n}))]},a)))})]})})}},8205:(e,a,n)=>{n.d(a,{A:()=>r});n(6540);var s=n(4848);const r=e=>{let{data:a}=e,n=[],r=[],t="",i="";if(a)try{const e=JSON.parse(a);t=e.name||"",i=e.dtype||"Unknown type",n=e.index||[],r=e.data||[]}catch(o){console.error("Error parsing data prop in SeriesComponent:",o)}const d=r.map((e=>JSON.stringify(e)));return(0,s.jsxs)("div",{className:"series-container",children:[(0,s.jsx)("ul",{className:"series-list",children:d.map(((e,a)=>(0,s.jsxs)("li",{className:"series-item",children:[(0,s.jsx)("span",{className:"series-index",children:n[a]}),(0,s.jsx)("span",{className:"series-value",children:"true"===e||"false"===e?e.charAt(0).toUpperCase()+e.slice(1):e})]},a)))}),(0,s.jsxs)("div",{className:"series-footer",children:["Name: ",t,", dtype: ",i]})]})}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>d});var s=n(6540);const r={},t=s.createContext(r);function i(e){const a=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:a},e.children)}}}]);